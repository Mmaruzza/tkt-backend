"use strict";

var _typeof = require("@babel/runtime-corejs2/helpers/typeof");
var _Reflect$construct = require("@babel/runtime-corejs2/core-js/reflect/construct");
var _WeakMap = require("@babel/runtime-corejs2/core-js/weak-map");
var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");
var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor");
var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");
_Object$defineProperty(exports, "__esModule", {
  value: true
});
exports.ReclaimHostNotSupportedError = exports.ReclaimHostNotAllowedError = exports.ReclaimHostIsHostAlreadyError = exports.ReclaimHostEmptyWrongKeyError = void 0;
var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));
var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/wrapNativeSuper"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));
var MEETINGCONSTANTS = _interopRequireWildcard(require("../../constants"));
function _getRequireWildcardCache(nodeInterop) { if (typeof _WeakMap !== "function") return null; var cacheBabelInterop = new _WeakMap(); var cacheNodeInterop = new _WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = _Object$defineProperty && _Object$getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { _Object$defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = _Reflect$construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !_Reflect$construct) return false; if (_Reflect$construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
/**
 * Extended Error object for reclaim host role empty or wrong key
 */
var ReclaimHostEmptyWrongKeyError = /*#__PURE__*/function (_Error) {
  (0, _inherits2.default)(ReclaimHostEmptyWrongKeyError, _Error);
  var _super = _createSuper(ReclaimHostEmptyWrongKeyError);
  /**
   *
   * @constructor
   * @param {String} [message]
   * @param {Object} [error]
   */
  function ReclaimHostEmptyWrongKeyError() {
    var _this;
    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_EMPTY_OR_WRONG_KEY.MESSAGE;
    var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    (0, _classCallCheck2.default)(this, ReclaimHostEmptyWrongKeyError);
    _this = _super.call(this, message);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "sdkMessage", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "error", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "code", void 0);
    if (Error.captureStackTrace) {
      Error.captureStackTrace((0, _assertThisInitialized2.default)(_this), ReclaimHostEmptyWrongKeyError);
    }
    _this.name = MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_EMPTY_OR_WRONG_KEY.NAME;
    _this.sdkMessage = message || MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_EMPTY_OR_WRONG_KEY.MESSAGE;
    _this.error = error;
    _this.code = MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_EMPTY_OR_WRONG_KEY.CODE;
    return _this;
  }
  return (0, _createClass2.default)(ReclaimHostEmptyWrongKeyError);
}( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
/**
 * Extended Error object for reclaim host role not supported
 */
exports.ReclaimHostEmptyWrongKeyError = ReclaimHostEmptyWrongKeyError;
var ReclaimHostNotSupportedError = /*#__PURE__*/function (_Error2) {
  (0, _inherits2.default)(ReclaimHostNotSupportedError, _Error2);
  var _super2 = _createSuper(ReclaimHostNotSupportedError);
  /**
   *
   * @constructor
   * @param {String} [message]
   * @param {Object} [error]
   */
  function ReclaimHostNotSupportedError() {
    var _this2;
    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_NOT_SUPPORTED.MESSAGE;
    var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    (0, _classCallCheck2.default)(this, ReclaimHostNotSupportedError);
    _this2 = _super2.call(this, message);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "sdkMessage", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "error", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this2), "code", void 0);
    if (Error.captureStackTrace) {
      Error.captureStackTrace((0, _assertThisInitialized2.default)(_this2), ReclaimHostNotSupportedError);
    }
    _this2.name = MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_NOT_SUPPORTED.NAME;
    _this2.sdkMessage = message || MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_NOT_SUPPORTED.MESSAGE;
    _this2.error = error;
    _this2.code = MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_NOT_SUPPORTED.CODE;
    return _this2;
  }
  return (0, _createClass2.default)(ReclaimHostNotSupportedError);
}( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
/**
 * Extended Error object for reclaim host role not allowed for other participants
 */
exports.ReclaimHostNotSupportedError = ReclaimHostNotSupportedError;
var ReclaimHostNotAllowedError = /*#__PURE__*/function (_Error3) {
  (0, _inherits2.default)(ReclaimHostNotAllowedError, _Error3);
  var _super3 = _createSuper(ReclaimHostNotAllowedError);
  /**
   *
   * @constructor
   * @param {String} [message]
   * @param {Object} [error]
   */
  function ReclaimHostNotAllowedError() {
    var _this3;
    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_NOT_ALLOWED.MESSAGE;
    var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    (0, _classCallCheck2.default)(this, ReclaimHostNotAllowedError);
    _this3 = _super3.call(this, message);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this3), "sdkMessage", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this3), "error", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this3), "code", void 0);
    if (Error.captureStackTrace) {
      Error.captureStackTrace((0, _assertThisInitialized2.default)(_this3), ReclaimHostNotAllowedError);
    }
    _this3.name = MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_NOT_ALLOWED.NAME;
    _this3.sdkMessage = message || MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_NOT_ALLOWED.MESSAGE;
    _this3.error = error;
    _this3.code = MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_NOT_ALLOWED.CODE;
    return _this3;
  }
  return (0, _createClass2.default)(ReclaimHostNotAllowedError);
}( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
/**
 * Extended Error object for reclaim host role when user is host already
 */
exports.ReclaimHostNotAllowedError = ReclaimHostNotAllowedError;
var ReclaimHostIsHostAlreadyError = /*#__PURE__*/function (_Error4) {
  (0, _inherits2.default)(ReclaimHostIsHostAlreadyError, _Error4);
  var _super4 = _createSuper(ReclaimHostIsHostAlreadyError);
  /**
   *
   * @constructor
   * @param {String} [message]
   * @param {Object} [error]
   */
  function ReclaimHostIsHostAlreadyError() {
    var _this4;
    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_IS_ALREADY_HOST.MESSAGE;
    var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    (0, _classCallCheck2.default)(this, ReclaimHostIsHostAlreadyError);
    _this4 = _super4.call(this, message);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this4), "sdkMessage", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this4), "error", void 0);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this4), "code", void 0);
    if (Error.captureStackTrace) {
      Error.captureStackTrace((0, _assertThisInitialized2.default)(_this4), ReclaimHostIsHostAlreadyError);
    }
    _this4.name = MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_IS_ALREADY_HOST.NAME;
    _this4.sdkMessage = message || MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_IS_ALREADY_HOST.MESSAGE;
    _this4.error = error;
    _this4.code = MEETINGCONSTANTS.ERROR_DICTIONARY.RECLAIM_HOST_ROLE_IS_ALREADY_HOST.CODE;
    return _this4;
  }
  return (0, _createClass2.default)(ReclaimHostIsHostAlreadyError);
}( /*#__PURE__*/(0, _wrapNativeSuper2.default)(Error));
exports.ReclaimHostIsHostAlreadyError = ReclaimHostIsHostAlreadyError;
//# sourceMappingURL=reclaim-host-role-error.js.map
